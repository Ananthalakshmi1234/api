const express = require("express");
const path = require("path");
const sqlite3 = require("sqlite3");
const { open } = require("sqlite");
const app = express();

app.use(express.json());

const dbPath = path.join(__dirname, "moviesData.db");

let db = null;

const initializeDbAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server running at http://localhost:3000/");
    });
  } catch (e) {
    console.log("Db error ${e.message}");
    process.exit(1);
  }
};

initializeDbAndServer();

const convertMovieNametoPascalCase = (dbObject) => {
  return {
    movieName: dbObject.movie_name,
  };
};

app.get("/movies/", async (request, response) => {
  const getAllMovieQuery = `
    select 
    movie_name
    from 
    movie;`;
  const moviesArray = await db.all(getAllMovieQuery);
  response.send(
    moviesArray.map((moviename) => convertMovieNametoPascalCase(moviename))
  );
});

//2.create a new movie

app.post("/movies/", async (request, response) => {
  const movieDetails = request.body;
  const { directorId, movieName, leadActor } = movieDetails;
  const addMovieQuery = `
    Insert Into
    movie (director_id,movie_name,lead_actor)
    values(
        ${directorId},
       " ${movieName}",
       "${leadActor}"
        );`;
  await db.run(addMovieQuery);
  response.send("Movie Successfully Added");
});

const convertMovieNametoPascalCase2 = (dbObject) => {
  return {
    movieId: dbObject.movie_id,
    directorId: dbObject.director_id,
    movieName: dbObject.movie_name,
    leadActor: dbObject.lead_actor,
  };
};

app.get("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  console.log(request.params);
  const getMovieQuery = `
    select 
    *from
    movie
    where 
    movie_id=${movieId};`;
  const movie = await db.get(getMovieQuery);
  response.send(convertMovieNametoPascalCase2(movie));
});

//4.update the details of the movie

app.put("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const movieDetails = request.body;
  const { directorId, movieName, leadActor } = movieDetails;
  const updateMovieQuery = `
    update 
    movie
    set
    director_id=${directorId},
    movie_name="${movieName}",
    lead_actor="${leadActor}"
    where
    movie_id=${movieId};`;
  await db.run(updateMovieQuery);
  response.send("Movie Details Updated");
});

//5.delete

app.delete("/movies/:movieId/", async (request, response) => {
  const { movieId } = request.params;
  const deleteMovieQuery = `
    delete 
    from
    movie
    where movie_id=${movieId};`;
  await db.run(deleteMovieQuery);
  response.send("Movie Removed");
});

//6.

const convertDirectorDetailsPascalCase = (dbObject) => {
  return {
    directorId: dbObject.director_id,
    directorName: dbObject.director_name,
  };
};

//6.list of all the directors

app.get("/directors/", async (request, response) => {
  const getAllDirectorsQuery = `
    select *
    from
    director;`;
  const directorArray = await db.all(getAllDirectorsQuery);
  response.send(
    directorArray.map((director) => convertDirectorDetailsPascalCase(director))
  );
});

const convertMovieNameToPascalCase1 = (movies) => {
  return {
    movieName: movies.movie_name,
  };
};

//7.return list of all movies by director

app.get("/directors/:directorId/movies/", async (request, response) => {
  const { directorId } = request.params;
  const getDirectorMovieQuery = `
    select 
    movie_name
    from 
    movie
    where
  director_id=${directorId};`;
  const movies = await db.all(getDirectorMovieQuery);
  response.send(movies.map((each) => ({ movieName: each.movie_name })));
});
module.exports = app;
